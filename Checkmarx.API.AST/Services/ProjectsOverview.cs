//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Checkmarx.API.AST.Services
{
    using System = global::System;
    using static Checkmarx.API.AST.ASTClient;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectsOverview 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        private Newtonsoft.Json.JsonSerializerSettings _instanceSettings;

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public ProjectsOverview(System.Uri aSTServer, System.Net.Http.HttpClient httpClient)
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = $"{aSTServer.AbsoluteUri}projects-overview";
            _httpClient = httpClient;
            Initialize();
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get tenant projects overview
        /// </summary>
        /// <param name="authorization">JWT access token (REQUIRED)</param>
        /// <param name="correlationId">Correlation ID, used to keep track of a flow if many APIs are involved</param>
        /// <param name="accept">API version should be appended to this header</param>
        /// <param name="name">the name of the project</param>
        /// <param name="scan_origin">a list of scan origins to filter projects</param>
        /// <param name="source_type">a list of source type to filter projects</param>
        /// <param name="group_ids">a list of group ids to filter projects</param>
        /// <param name="tag_keys">a list of tag keys to filter projects</param>
        /// <param name="tag_values">a list of tag values to filter projects</param>
        /// <param name="empty_tags">whether the project has tags or not</param>
        /// <param name="risk_level">a list of risk levels to filter projects</param>
        /// <param name="from_date">the start date to filter projects</param>
        /// <param name="to_date">the start date to filter projects</param>
        /// <param name="is_deployed">whether the project is deployed in runtime or not</param>
        /// <param name="is_public">whether the project is publicly exposed in runtime or not</param>
        /// <param name="sort">A comma-separated list of sort criteria. Each criterion is formatted as '+field,-field2' or '-field,+field2' where 'field' and 'filed2 are the names of the fields to sort by and '+' or '-' specifies descending or ascending order.</param>
        /// <returns>Successful retrieval of projects collection.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectsResponse> GetTenantProjects(string authorization, System.Guid? correlationId, string accept, int? unnamedUndefined, string name, System.Collections.Generic.IEnumerable<string> scan_origin, System.Collections.Generic.IEnumerable<string> source_type, System.Collections.Generic.IEnumerable<string> group_ids, System.Collections.Generic.IEnumerable<string> tag_keys, System.Collections.Generic.IEnumerable<string> tag_values, bool? empty_tags, System.Collections.Generic.IEnumerable<Anonymous> risk_level, System.DateTimeOffset? from_date, System.DateTimeOffset? to_date, bool? is_deployed, bool? is_public, System.Collections.Generic.IEnumerable<Anonymous2> sort)
        {
            return GetTenantProjects(authorization, correlationId, accept, unnamedUndefined, name, scan_origin, source_type, group_ids, tag_keys, tag_values, empty_tags, risk_level, from_date, to_date, is_deployed, is_public, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get tenant projects overview
        /// </summary>
        /// <param name="authorization">JWT access token (REQUIRED)</param>
        /// <param name="correlationId">Correlation ID, used to keep track of a flow if many APIs are involved</param>
        /// <param name="accept">API version should be appended to this header</param>
        /// <param name="name">the name of the project</param>
        /// <param name="scan_origin">a list of scan origins to filter projects</param>
        /// <param name="source_type">a list of source type to filter projects</param>
        /// <param name="group_ids">a list of group ids to filter projects</param>
        /// <param name="tag_keys">a list of tag keys to filter projects</param>
        /// <param name="tag_values">a list of tag values to filter projects</param>
        /// <param name="empty_tags">whether the project has tags or not</param>
        /// <param name="risk_level">a list of risk levels to filter projects</param>
        /// <param name="from_date">the start date to filter projects</param>
        /// <param name="to_date">the start date to filter projects</param>
        /// <param name="is_deployed">whether the project is deployed in runtime or not</param>
        /// <param name="is_public">whether the project is publicly exposed in runtime or not</param>
        /// <param name="sort">A comma-separated list of sort criteria. Each criterion is formatted as '+field,-field2' or '-field,+field2' where 'field' and 'filed2 are the names of the fields to sort by and '+' or '-' specifies descending or ascending order.</param>
        /// <returns>Successful retrieval of projects collection.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectsResponse> GetTenantProjects(string authorization, System.Guid? correlationId, string accept, int? unnamedUndefined, string name, System.Collections.Generic.IEnumerable<string> scan_origin, System.Collections.Generic.IEnumerable<string> source_type, System.Collections.Generic.IEnumerable<string> group_ids, System.Collections.Generic.IEnumerable<string> tag_keys, System.Collections.Generic.IEnumerable<string> tag_values, bool? empty_tags, System.Collections.Generic.IEnumerable<Anonymous> risk_level, System.DateTimeOffset? from_date, System.DateTimeOffset? to_date, bool? is_deployed, bool? is_public, System.Collections.Generic.IEnumerable<Anonymous2> sort, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (correlationId != null)
                        request_.Headers.TryAddWithoutValidation("CorrelationId", ConvertToString(correlationId, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: ""
                    urlBuilder_.Append('?');
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scan_origin != null)
                    {
                        foreach (var item_ in scan_origin) { urlBuilder_.Append(System.Uri.EscapeDataString("scan-origin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (source_type != null)
                    {
                        foreach (var item_ in source_type) { urlBuilder_.Append(System.Uri.EscapeDataString("source-type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (group_ids != null)
                    {
                        foreach (var item_ in group_ids) { urlBuilder_.Append(System.Uri.EscapeDataString("group-ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tag_keys != null)
                    {
                        foreach (var item_ in tag_keys) { urlBuilder_.Append(System.Uri.EscapeDataString("tag-keys")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tag_values != null)
                    {
                        foreach (var item_ in tag_values) { urlBuilder_.Append(System.Uri.EscapeDataString("tag-values")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (empty_tags != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("empty-tags")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(empty_tags, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (risk_level != null)
                    {
                        foreach (var item_ in risk_level) { urlBuilder_.Append(System.Uri.EscapeDataString("risk-level")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (from_date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("from-date")).Append('=').Append(System.Uri.EscapeDataString(from_date.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to_date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to-date")).Append('=').Append(System.Uri.EscapeDataString(to_date.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (is_deployed != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("is-deployed")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(is_deployed, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (is_public != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("is-public")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(is_public, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await _retryPolicy.ExecuteAsync(() => client_.SendAsync(CloneHttpRequestMessage(request_), System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized, Access token is missing or invalid", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Not Implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Get project counters
        /// </remarks>
        /// <param name="authorization">JWT access token (REQUIRED)</param>
        /// <param name="correlationId">Correlation ID, used to keep track of a flow if many APIs are involved</param>
        /// <param name="accept">API version should be appended to this header</param>
        /// <param name="group_by_field">the field to group by</param>
        /// <param name="name">the name of the project</param>
        /// <param name="scan_origin">a list of scan origins to filter projects</param>
        /// <param name="source_type">a list of source type to filter projects</param>
        /// <param name="group_ids">a list of group ids to filter projects</param>
        /// <param name="tag_keys">a list of tag keys to filter projects</param>
        /// <param name="tag_values">a list of tag values to filter projects</param>
        /// <param name="empty_tags">whether the project has tags or not</param>
        /// <param name="risk_level">a list of risk levels to filter projects</param>
        /// <param name="from_date">the start date to filter projects</param>
        /// <param name="to_date">the start date to filter projects</param>
        /// <returns>Successful retrieval of project counters</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectsOverviewResponse> AggregateAsync(string authorization, System.Guid? correlationId, string accept, int? unnamedUndefined, GroupByField group_by_field, string name, System.Collections.Generic.IEnumerable<string> scan_origin, System.Collections.Generic.IEnumerable<string> source_type, System.Collections.Generic.IEnumerable<string> group_ids, System.Collections.Generic.IEnumerable<string> tag_keys, System.Collections.Generic.IEnumerable<string> tag_values, bool? empty_tags, System.Collections.Generic.IEnumerable<Severity> risk_level, System.DateTimeOffset? from_date, System.DateTimeOffset? to_date)
        {
            return AggregateAsync(authorization, correlationId, accept, unnamedUndefined, group_by_field, name, scan_origin, source_type, group_ids, tag_keys, tag_values, empty_tags, risk_level, from_date, to_date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get project counters
        /// </remarks>
        /// <param name="authorization">JWT access token (REQUIRED)</param>
        /// <param name="correlationId">Correlation ID, used to keep track of a flow if many APIs are involved</param>
        /// <param name="accept">API version should be appended to this header</param>
        /// <param name="group_by_field">the field to group by</param>
        /// <param name="name">the name of the project</param>
        /// <param name="scan_origin">a list of scan origins to filter projects</param>
        /// <param name="source_type">a list of source type to filter projects</param>
        /// <param name="group_ids">a list of group ids to filter projects</param>
        /// <param name="tag_keys">a list of tag keys to filter projects</param>
        /// <param name="tag_values">a list of tag values to filter projects</param>
        /// <param name="empty_tags">whether the project has tags or not</param>
        /// <param name="risk_level">a list of risk levels to filter projects</param>
        /// <param name="from_date">the start date to filter projects</param>
        /// <param name="to_date">the start date to filter projects</param>
        /// <returns>Successful retrieval of project counters</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectsOverviewResponse> AggregateAsync(string authorization, System.Guid? correlationId, string accept, int? unnamedUndefined, GroupByField group_by_field, string name, System.Collections.Generic.IEnumerable<string> scan_origin, System.Collections.Generic.IEnumerable<string> source_type, System.Collections.Generic.IEnumerable<string> group_ids, System.Collections.Generic.IEnumerable<string> tag_keys, System.Collections.Generic.IEnumerable<string> tag_values, bool? empty_tags, System.Collections.Generic.IEnumerable<Severity> risk_level, System.DateTimeOffset? from_date, System.DateTimeOffset? to_date, System.Threading.CancellationToken cancellationToken)
        {
            if (group_by_field == null)
                throw new System.ArgumentNullException("group_by_field");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (correlationId != null)
                        request_.Headers.TryAddWithoutValidation("CorrelationId", ConvertToString(correlationId, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "aggregate"
                    urlBuilder_.Append("aggregate");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("group-by-field")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(group_by_field, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (scan_origin != null)
                    {
                        foreach (var item_ in scan_origin) { urlBuilder_.Append(System.Uri.EscapeDataString("scan-origin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (source_type != null)
                    {
                        foreach (var item_ in source_type) { urlBuilder_.Append(System.Uri.EscapeDataString("source-type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (group_ids != null)
                    {
                        foreach (var item_ in group_ids) { urlBuilder_.Append(System.Uri.EscapeDataString("group-ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tag_keys != null)
                    {
                        foreach (var item_ in tag_keys) { urlBuilder_.Append(System.Uri.EscapeDataString("tag-keys")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (tag_values != null)
                    {
                        foreach (var item_ in tag_values) { urlBuilder_.Append(System.Uri.EscapeDataString("tag-values")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (empty_tags != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("empty-tags")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(empty_tags, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (risk_level != null)
                    {
                        foreach (var item_ in risk_level) { urlBuilder_.Append(System.Uri.EscapeDataString("risk-level")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (from_date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("from-date")).Append('=').Append(System.Uri.EscapeDataString(from_date.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (to_date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("to-date")).Append('=').Append(System.Uri.EscapeDataString(to_date.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await _retryPolicy.ExecuteAsync(() => client_.SendAsync(CloneHttpRequestMessage(request_), System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken)).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectsOverviewResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Unauthorized, Access token is missing or invalid", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Forbidden", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 501)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Not Implemented", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FieldCounter
    {
        /// <summary>
        /// The field value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// The count for the field value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectsOverviewResponse
    {
        /// <summary>
        /// An array of field counters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectsCounters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldCounter> ProjectsCounters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectResponseModel
    {
        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectName { get; set; }

        /// <summary>
        /// The origin of the project source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceOrigin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceOrigin { get; set; }

        /// <summary>
        /// The date of the last scan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastScanDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastScanDate { get; set; }

        /// <summary>
        /// The type of project source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceType { get; set; }

        /// <summary>
        /// A map of project tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Tags { get; set; }

        /// <summary>
        /// An array of group IDs associated with the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GroupIds { get; set; }

        /// <summary>
        /// The overall risk level of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("riskLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RiskLevel { get; set; }

        /// <summary>
        /// The ID of the repository associated with the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repoId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ulong RepoId { get; set; }

        /// <summary>
        /// The ID of the SCM repository associated with the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scmRepoId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScmRepoId { get; set; }

        [Newtonsoft.Json.JsonProperty("totalCounters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TotalCounters TotalCounters { get; set; }

        [Newtonsoft.Json.JsonProperty("enginesData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EngineData> EnginesData { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TotalCounters
    {
        [Newtonsoft.Json.JsonProperty("severityCounters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SeverityCounters> SeverityCounters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SeverityCounters
    {
        /// <summary>
        /// The severity level of the vulnerability.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Severity { get; set; }

        /// <summary>
        /// The number of vulnerabilities found at this severity level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("counter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Counter { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EngineData
    {
        /// <summary>
        /// The name of the scanning engine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("engine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Engine { get; set; }

        /// <summary>
        /// The risk level reported by the engine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("riskLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RiskLevel { get; set; }

        /// <summary>
        /// The ID of the last scan performed by the engine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastScanId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastScanId { get; set; }

        [Newtonsoft.Json.JsonProperty("severityCounters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SeverityCounters> SeverityCounters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    //[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    //public partial class Error
    //{
    //    [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public string Message { get; set; }

    //    [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public int Code { get; set; }

    //    [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
    //    public object Data { get; set; }

    //    private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

    //    [Newtonsoft.Json.JsonExtensionData]
    //    public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
    //    {
    //        get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
    //        set { _additionalProperties = value; }
    //    }

    //}

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"No Risk")]
        No_Risk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Low")]
        Low = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Medium")]
        Medium = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"High")]
        High = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Critical")]
        Critical = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"scan-origin")]
        ScanOrigin = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"last-scan-date")]
        LastScanDate = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"source-type")]
        SourceType = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"risk-level")]
        RiskLevel = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"is-public")]
        IsPublic = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GroupByField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"risk-level")]
        RiskLevel = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Severity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"No Risk")]
        No_Risk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Low")]
        Low = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Medium")]
        Medium = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"High")]
        High = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Critical")]
        Critical = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectsResponse
    {
        /// <summary>
        /// The total number of projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TotalCount { get; set; }

        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectResponseModel> Projects { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }



    //[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    //public partial class ApiException : System.Exception
    //{
    //    public int StatusCode { get; private set; }

    //    public string Response { get; private set; }

    //    public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

    //    public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
    //        : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
    //    {
    //        StatusCode = statusCode;
    //        Response = response;
    //        Headers = headers;
    //    }

    //    public override string ToString()
    //    {
    //        return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
    //    }
    //}

    //[System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    //public partial class ApiException<TResult> : ApiException
    //{
    //    public TResult Result { get; private set; }

    //    public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
    //        : base(message, statusCode, response, headers, innerException)
    //    {
    //        Result = result;
    //    }
    //}

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625