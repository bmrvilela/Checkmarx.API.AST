//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace Checkmarx.API.AST.Services.SASTResults
{
    using System;
    using System.Diagnostics;
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SASTResults
    {
#pragma warning disable 8618
        private string _baseUrl;
#pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public SASTResults(Uri serverUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = $"{serverUrl.AbsoluteUri}api/sast-results";
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get SAST results for a specific scan
        /// </summary>
        /// <remarks>
        /// Scan ID is a required query param. You can limit results by using pagination and/or setting filters.&lt;br&gt;Note: An AND operator is applied between filters, and an OR operator is applied to multiple values for each filter.
        /// </remarks>
        /// <param name="authorization">JWT access token (REQUIRED)</param>
        /// <param name="accept">The API version should be appended to this header</param>
        /// <param name="correlationId">Correlation ID, used to keep track of a flow if many APIs are involved</param>
        /// <param name="request_data">Replace query parameters. JSON example: {"visible-columns": ["scan-id", "result-id","query-ids"],"include-nodes": ["true"],"apply-predicates": ["true"]}</param>
        /// <param name="visible_columns">Specify which columns should be visible</param>
        /// <param name="scan_id">Filter results by scan ID</param>
        /// <param name="severity">Filter results by severity</param>
        /// <param name="state">Filter results by state</param>
        /// <param name="status">Filter results by status</param>
        /// <param name="group">Filter results by the vulnerability group&lt;br&gt; Note: Can be a substring of the group name.</param>
        /// <param name="compliance">Filter by compliance standard &lt;br&gt; Note: Must be an exact match, case insensitive.</param>
        /// <param name="query">Filter results by query&lt;br&gt; Note: Must be an exact match.</param>
        /// <param name="language">Filter results by the language&lt;br&gt; Note: Must be an exact match, case insensitive.</param>
        /// <param name="query_ids">Filter results by query IDs&lt;br&gt;Note: Must be an exact match.</param>
        /// <param name="node_ids">Filter results by Node IDs.&lt;br&gt; Note: OR operator for multiple IDs.</param>
        /// <param name="source_file">Filter by source file name.</param>
        /// <param name="source_file_operation">The operator that you would like to apply to the specified source file value.</param>
        /// <param name="source_node">Filter results by source node.</param>
        /// <param name="source_node_operation">The operator that you would like to apply to the specified source node value.</param>
        /// <param name="source_line">Filter results by source line.</param>
        /// <param name="source_line_operation">The operator that you would like to apply to the specified source line value.</param>
        /// <param name="sink_node">Filter results by sink node</param>
        /// <param name="sink_node_operation">The operator that you would like to apply to the specified sink node value.</param>
        /// <param name="sink_file">Filter results by sink file name.</param>
        /// <param name="sink_file_operation">The operator that you would like to apply to the specified sink file name value.</param>
        /// <param name="sink_line">Filter results by sink line.</param>
        /// <param name="sink_line_operation">The operator that you would like to apply to the specified sink line value.</param>
        /// <param name="number_of_nodes">Filter results by number of nodes.</param>
        /// <param name="number_of_nodes_operation">The operator that you would like to apply to the specified number of nodes value.</param>
        /// <param name="notes">Filter results by last notes.</param>
        /// <param name="notes_operation">The operator that you would like to apply to the specified notes value.</param>
        /// <param name="first_found_at">Filter results by first found at.</param>
        /// <param name="first_found_at_operation">The operator that you would like to apply to the specified first found at value. (defaults to GREATER_THAN)</param>
        /// <param name="preset_id">Filter results by preset</param>
        /// <param name="result_id">filter by unique result hash</param>
        /// <param name="category">Filter results by category name.</param>
        /// <param name="search">Filter results by source file name, source node, sink node, sink file name, notes.</param>
        /// <param name="include_nodes">If true, the results will include nodes data. If false, the node data will be omitted.</param>
        /// <param name="apply_predicates">If true, the results show changes made to predicates. If false, the raw predicate values will be returned.</param>
        /// <param name="offset">The number of results to skip before returning results set.</param>
        /// <param name="limit">The maximum number of results to return</param>
        /// <param name="sort">Sort results by the specified parameter. Enter '-/+/@' for ascending/descending/default order, followed by the parameter.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        internal virtual System.Threading.Tasks.Task<SASTResultsResponse> GetSASTResultsByScanAsync(
            Guid scan_id,
            int? offset = null,
            int? limit = null,
            string request_data = null,
            System.Collections.Generic.IEnumerable<ResultsSeverity> severity = null,
            System.Collections.Generic.IEnumerable<ResultsState> state = null,
            System.Collections.Generic.IEnumerable<ResultsStatus> status = null,
            System.Collections.Generic.IEnumerable<VisibleColumnsEnum> visible_columns = null,
            string group = null,
            string compliance = null,
            string query = null,
            System.Collections.Generic.IEnumerable<string> language = null,
            System.Collections.Generic.IEnumerable<double> query_ids = null,
            System.Collections.Generic.IEnumerable<string> node_ids = null,
            string source_file = null,
            OperationEnum? source_file_operation = null,
            string source_node = null,
            OperationEnum? source_node_operation = null,
            double? source_line = null,
            OperationIntEnum? source_line_operation = null,
            string sink_node = null,
            OperationEnum? sink_node_operation = null,
            string sink_file = null,
            OperationEnum? sink_file_operation = null,
            double? sink_line = null,
            OperationIntEnum? sink_line_operation = null,
            double? number_of_nodes = null,
            OperationIntEnum? number_of_nodes_operation = null,
            string notes = null,
            OperationJSONBArrayEnum? notes_operation = null,
            System.DateTimeOffset? first_found_at = null,
            OperationDateEnum? first_found_at_operation = null,
            string preset_id = null,
            System.Collections.Generic.IEnumerable<string> result_id = null,
            string category = null,
            string search = null,
            bool? include_nodes = null,
            bool? apply_predicates = null,
            string sort = null,
            string authorization = null,
            string accept = null,
            System.Guid? correlationId = null)
        {
            return GetSASTResultsByScanAsync(authorization, accept, correlationId, request_data, visible_columns, scan_id, severity, state, status, group, compliance, query, language, query_ids, node_ids, source_file, source_file_operation, source_node, source_node_operation, source_line, source_line_operation, sink_node, sink_node_operation, sink_file, sink_file_operation, sink_line, sink_line_operation, number_of_nodes, number_of_nodes_operation, notes, notes_operation, first_found_at, first_found_at_operation, preset_id, result_id, category, search, include_nodes, apply_predicates, offset, limit, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get SAST results for a specific scan
        /// </summary>
        /// <remarks>
        /// Scan ID is a required query param. You can limit results by using pagination and/or setting filters.&lt;br&gt;Note: An AND operator is applied between filters, and an OR operator is applied to multiple values for each filter.
        /// </remarks>
        /// <param name="authorization">JWT access token (REQUIRED)</param>
        /// <param name="accept">The API version should be appended to this header</param>
        /// <param name="correlationId">Correlation ID, used to keep track of a flow if many APIs are involved</param>
        /// <param name="request_data">Replace query parameters. JSON example: {"visible-columns": ["scan-id", "result-id","query-ids"],"include-nodes": ["true"],"apply-predicates": ["true"]}</param>
        /// <param name="visible_columns">Specify which columns should be visible</param>
        /// <param name="scan_id">Filter results by scan ID</param>
        /// <param name="severity">Filter results by severity</param>
        /// <param name="state">Filter results by state</param>
        /// <param name="status">Filter results by status</param>
        /// <param name="group">Filter results by the vulnerability group&lt;br&gt; Note: Can be a substring of the group name.</param>
        /// <param name="compliance">Filter by compliance standard &lt;br&gt; Note: Must be an exact match, case insensitive.</param>
        /// <param name="query">Filter results by query&lt;br&gt; Note: Must be an exact match.</param>
        /// <param name="language">Filter results by the language&lt;br&gt; Note: Must be an exact match, case insensitive.</param>
        /// <param name="query_ids">Filter results by query IDs&lt;br&gt;Note: Must be an exact match.</param>
        /// <param name="node_ids">Filter results by Node IDs.&lt;br&gt; Note: OR operator for multiple IDs.</param>
        /// <param name="source_file">Filter by source file name.</param>
        /// <param name="source_file_operation">The operator that you would like to apply to the specified source file value.</param>
        /// <param name="source_node">Filter results by source node.</param>
        /// <param name="source_node_operation">The operator that you would like to apply to the specified source node value.</param>
        /// <param name="source_line">Filter results by source line.</param>
        /// <param name="source_line_operation">The operator that you would like to apply to the specified source line value.</param>
        /// <param name="sink_node">Filter results by sink node</param>
        /// <param name="sink_node_operation">The operator that you would like to apply to the specified sink node value.</param>
        /// <param name="sink_file">Filter results by sink file name.</param>
        /// <param name="sink_file_operation">The operator that you would like to apply to the specified sink file name value.</param>
        /// <param name="sink_line">Filter results by sink line.</param>
        /// <param name="sink_line_operation">The operator that you would like to apply to the specified sink line value.</param>
        /// <param name="number_of_nodes">Filter results by number of nodes.</param>
        /// <param name="number_of_nodes_operation">The operator that you would like to apply to the specified number of nodes value.</param>
        /// <param name="notes">Filter results by last notes.</param>
        /// <param name="notes_operation">The operator that you would like to apply to the specified notes value.</param>
        /// <param name="first_found_at">Filter results by first found at.</param>
        /// <param name="first_found_at_operation">The operator that you would like to apply to the specified first found at value. (defaults to GREATER_THAN)</param>
        /// <param name="preset_id">Filter results by preset</param>
        /// <param name="result_id">filter by unique result hash</param>
        /// <param name="category">Filter results by category name.</param>
        /// <param name="search">Filter results by source file name, source node, sink node, sink file name, notes.</param>
        /// <param name="include_nodes">If true, the results will include nodes data. If false, the node data will be omitted.</param>
        /// <param name="apply_predicates">If true, the results show changes made to predicates. If false, the raw predicate values will be returned.</param>
        /// <param name="offset">The number of results to skip before returning results set.</param>
        /// <param name="limit">The maximum number of results to return</param>
        /// <param name="sort">Sort results by the specified parameter. Enter '-/+/@' for ascending/descending/default order, followed by the parameter.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        internal virtual async System.Threading.Tasks.Task<SASTResultsResponse> GetSASTResultsByScanAsync(string authorization, string accept, System.Guid? correlationId, string request_data, System.Collections.Generic.IEnumerable<VisibleColumnsEnum> visible_columns, Guid scan_id, System.Collections.Generic.IEnumerable<ResultsSeverity> severity, System.Collections.Generic.IEnumerable<ResultsState> state, System.Collections.Generic.IEnumerable<ResultsStatus> status, string group, string compliance, string query, System.Collections.Generic.IEnumerable<string> language, System.Collections.Generic.IEnumerable<double> query_ids, System.Collections.Generic.IEnumerable<string> node_ids, string source_file, OperationEnum? source_file_operation, string source_node, OperationEnum? source_node_operation, double? source_line, OperationIntEnum? source_line_operation, string sink_node, OperationEnum? sink_node_operation, string sink_file, OperationEnum? sink_file_operation, double? sink_line, OperationIntEnum? sink_line_operation, double? number_of_nodes, OperationIntEnum? number_of_nodes_operation, string notes, OperationJSONBArrayEnum? notes_operation, System.DateTimeOffset? first_found_at, OperationDateEnum? first_found_at_operation, string preset_id, System.Collections.Generic.IEnumerable<string> result_id, string category, string search, bool? include_nodes, bool? apply_predicates, int? offset, int? limit, string sort, System.Threading.CancellationToken cancellationToken)
        {
            if (scan_id == null)
                throw new System.ArgumentNullException("scan_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));

                    if (correlationId != null)
                        request_.Headers.TryAddWithoutValidation("CorrelationId", ConvertToString(correlationId, System.Globalization.CultureInfo.InvariantCulture));

                    if (request_data != null)
                        request_.Headers.TryAddWithoutValidation("request-data", ConvertToString(request_data, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: ""
                    urlBuilder_.Append('?');
                    if (visible_columns != null)
                    {
                        foreach (var item_ in visible_columns) { urlBuilder_.Append(System.Uri.EscapeDataString("visible-columns")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Append(System.Uri.EscapeDataString("scan-id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scan_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (severity != null)
                    {
                        foreach (var item_ in severity) { urlBuilder_.Append(System.Uri.EscapeDataString("severity")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (state != null)
                    {
                        foreach (var item_ in state) { urlBuilder_.Append(System.Uri.EscapeDataString("state")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (status != null)
                    {
                        foreach (var item_ in status) { urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (group != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(group, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (compliance != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("compliance")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(compliance, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (query != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        foreach (var item_ in language) { urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (query_ids != null)
                    {
                        foreach (var item_ in query_ids) { urlBuilder_.Append(System.Uri.EscapeDataString("query-ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (node_ids != null)
                    {
                        foreach (var item_ in node_ids) { urlBuilder_.Append(System.Uri.EscapeDataString("node-ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (source_file != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("source-file")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(source_file, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (source_file_operation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("source-file-operation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(source_file_operation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (source_node != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("source-node")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(source_node, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (source_node_operation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("source-node-operation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(source_node_operation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (source_line != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("source-line")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(source_line, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (source_line_operation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("source-line-operation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(source_line_operation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sink_node != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sink-node")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sink_node, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sink_node_operation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sink-node-operation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sink_node_operation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sink_file != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sink-file")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sink_file, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sink_file_operation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sink-file-operation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sink_file_operation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sink_line != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sink-line")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sink_line, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sink_line_operation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sink-line-operation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sink_line_operation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (number_of_nodes != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("number-of-nodes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(number_of_nodes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (number_of_nodes_operation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("number-of-nodes-operation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(number_of_nodes_operation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (notes != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("notes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(notes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (notes_operation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("notes-operation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(notes_operation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first_found_at != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first-found-at")).Append('=').Append(System.Uri.EscapeDataString(first_found_at.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (first_found_at_operation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("first-found-at-operation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(first_found_at_operation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (preset_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("preset-id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(preset_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (result_id != null)
                    {
                        foreach (var item_ in result_id) { urlBuilder_.Append(System.Uri.EscapeDataString("result-id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (category != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("category")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(category, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (include_nodes != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("include-nodes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(include_nodes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (apply_predicates != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("apply-predicates")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(apply_predicates, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
#if DEBUG
                            var content = await response_.Content.ReadAsStringAsync();
                            Trace.WriteLine(content);
#endif

                            var objectResponse_ = await ReadObjectResponseAsync<SASTResultsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WebError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<WebError>("Invalid request supplied", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get SAST results comparison for two given scans
        /// </summary>
        /// <remarks>
        /// Scan ID/Base Scan ID are required query parameters. You can limit results by using pagination and/or setting filters (NOTE: if no limit is provided, there is one used by default!)
        /// </remarks>
        /// <param name="authorization">JWT access token (REQUIRED)</param>
        /// <param name="accept">The API version should be appended to this header</param>
        /// <param name="correlationId">Correlation ID, used to keep track of a flow if many APIs are involved</param>
        /// <param name="scan_id">ScanID to use as the newest in the comparison</param>
        /// <param name="base_scan_id">ScanID to use as the oldest in the comparison</param>
        /// <param name="severity">Filter results by severity</param>
        /// <param name="status">Filter results by status</param>
        /// <param name="query">Filter results by query&lt;br&gt; Note: Must be an exact match.</param>
        /// <param name="language">Filter results by the language&lt;br&gt; Note: Must be an exact match, case insensitive.</param>
        /// <param name="query_ids">Filter results by query IDs&lt;br&gt;Note: Must be an exact match.</param>
        /// <param name="offset">The number of results to skip before returning results set.</param>
        /// <param name="limit">The maximum number of results to return</param>
        /// <param name="sort">Sort results by the specified parameter. Enter '-/+' for ascending/descending order, followed by the parameter.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SastResultCompareResponse> GetSASTResultsCompareByScansAsync(Guid scan_id, Guid base_scan_id,
            string authorization = null,
            string accept = null,
            System.Guid? correlationId = null,
            System.Collections.Generic.IEnumerable<ResultsSeverity> severity = null,
            System.Collections.Generic.IEnumerable<ResultsStatus> status = null,
            string query = null,
            System.Collections.Generic.IEnumerable<string> language = null,
            System.Collections.Generic.IEnumerable<double> query_ids = null,
            int? offset = null,
            int? limit = null,
            System.Collections.Generic.IEnumerable<Anonymous> sort = null)
        {
            return GetSASTResultsCompareByScansAsync(authorization, accept, correlationId, scan_id, base_scan_id, severity, status, query, language, query_ids, offset, limit, sort, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get SAST results comparison for two given scans
        /// </summary>
        /// <remarks>
        /// Scan ID/Base Scan ID are required query parameters. You can limit results by using pagination and/or setting filters (NOTE: if no limit is provided, there is one used by default!)
        /// </remarks>
        /// <param name="authorization">JWT access token (REQUIRED)</param>
        /// <param name="accept">The API version should be appended to this header</param>
        /// <param name="correlationId">Correlation ID, used to keep track of a flow if many APIs are involved</param>
        /// <param name="scan_id">ScanID to use as the newest in the comparison</param>
        /// <param name="base_scan_id">ScanID to use as the oldest in the comparison</param>
        /// <param name="severity">Filter results by severity</param>
        /// <param name="status">Filter results by status</param>
        /// <param name="query">Filter results by query&lt;br&gt; Note: Must be an exact match.</param>
        /// <param name="language">Filter results by the language&lt;br&gt; Note: Must be an exact match, case insensitive.</param>
        /// <param name="query_ids">Filter results by query IDs&lt;br&gt;Note: Must be an exact match.</param>
        /// <param name="offset">The number of results to skip before returning results set.</param>
        /// <param name="limit">The maximum number of results to return</param>
        /// <param name="sort">Sort results by the specified parameter. Enter '-/+' for ascending/descending order, followed by the parameter.</param>
        /// <returns>Successful operation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        internal virtual async System.Threading.Tasks.Task<SastResultCompareResponse> GetSASTResultsCompareByScansAsync(string authorization, string accept, System.Guid? correlationId, Guid scan_id, Guid base_scan_id, System.Collections.Generic.IEnumerable<ResultsSeverity> severity, System.Collections.Generic.IEnumerable<ResultsStatus> status, string query, System.Collections.Generic.IEnumerable<string> language, System.Collections.Generic.IEnumerable<double> query_ids, int? offset, int? limit, System.Collections.Generic.IEnumerable<Anonymous> sort, System.Threading.CancellationToken cancellationToken)
        {
            if (scan_id == null)
                throw new System.ArgumentNullException("scan_id");

            if (base_scan_id == null)
                throw new System.ArgumentNullException("base_scan_id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization != null)
                        request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));

                    if (accept != null)
                        request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));

                    if (correlationId != null)
                        request_.Headers.TryAddWithoutValidation("CorrelationId", ConvertToString(correlationId, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "compare"
                    urlBuilder_.Append("compare");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("scan-id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(scan_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Append(System.Uri.EscapeDataString("base-scan-id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(base_scan_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (severity != null)
                    {
                        foreach (var item_ in severity) { urlBuilder_.Append(System.Uri.EscapeDataString("severity")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (status != null)
                    {
                        foreach (var item_ in status) { urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (query != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (language != null)
                    {
                        foreach (var item_ in language) { urlBuilder_.Append(System.Uri.EscapeDataString("language")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (query_ids != null)
                    {
                        foreach (var item_ in query_ids) { urlBuilder_.Append(System.Uri.EscapeDataString("query-ids")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (offset != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offset")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        foreach (var item_ in sort) { urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SastResultCompareResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WebError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<WebError>("Invalid request supplied", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// state enum of a result.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResultsState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TO_VERIFY")]
        TO_VERIFY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_EXPLOITABLE")]
        NOT_EXPLOITABLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROPOSED_NOT_EXPLOITABLE")]
        PROPOSED_NOT_EXPLOITABLE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED")]
        CONFIRMED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"URGENT")]
        URGENT = 4,

    }

    /// <summary>
    /// The severity of the vulnerability
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResultsSeverity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CRITICAL")]
        CRITICAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HIGH")]
        HIGH = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MEDIUM")]
        MEDIUM = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LOW")]
        LOW = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"INFO")]
        INFO = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VisibleColumnsEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BFL")]
        BFL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"bfl-group-size")]
        BflGroupSize = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"category")]
        Category = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"change-details")]
        ChangeDetails = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"compliance")]
        Compliance = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"confidence-level")]
        ConfidenceLevel = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"cwe-id")]
        CweId = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"cvss-score")]
        CvssScore = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"first-at")]
        FirstAt = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"first-found-at")]
        FirstFoundAt = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"first-time-scan-id")]
        FirstTimeScanId = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"language")]
        Language = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"nodes")]
        Nodes = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"notes")]
        Notes = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"notes-json")]
        NotesJson = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"number-of-nodes")]
        NumberOfNodes = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"path-system-id")]
        PathSystemId = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"project-id")]
        ProjectId = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"query-ids")]
        QueryIds = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"query-name")]
        QueryName = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"result-id")]
        ResultId = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"scan-id")]
        ScanId = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"severity")]
        Severity = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"similarity-id")]
        SimilarityId = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"sink-file")]
        SinkFile = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"sink-line")]
        SinkLine = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"sink-node")]
        SinkNode = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"source-file")]
        SourceFile = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"source-line")]
        SourceLine = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"source-node")]
        SourceNode = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"state")]
        State = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"status")]
        Status = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"tenant-id")]
        TenantId = 33,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SASTResult
    {
        /// <summary>
        /// ID of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ID { get; set; }

        /// <summary>
        /// An ID that represents this result system wide
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resultHash", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResultHash { get; set; }

        /// <summary>
        /// Please use "resultHash" instead
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pathSystemID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public string PathSystemID { get; set; }

        /// <summary>
        /// The ID of the query that generated this result (i.e. the vulnerability that was identified)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueryID { get; set; }

        /// <summary>
        /// The ID of the query that generated this result in string format (i.e. the vulnerability that was identified)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryIDStr", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueryIDStr { get; set; }

        /// <summary>
        /// The name of the query/vulnerability
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueryName { get; set; }

        /// <summary>
        /// The language of the vulnerability
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageName { get; set; }

        /// <summary>
        /// The name of the query/vulnerability group
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group { get; set; }

        /// <summary>
        /// The ID of the Common Weakness Enumeration(CWE)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cweID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CweID { get; set; }

        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResultsSeverity Severity { get; set; }

        /// <summary>
        /// A value assigned to a specific vulnerability instance in your scan, based on the first and last nodes.&lt;br&gt;This enables CxAST to track that particular instance in future scans.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("similarityID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimilarityID { get; set; }

        [Newtonsoft.Json.JsonProperty("uniqueID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public int UniqueID { get; set; }

        /// <summary>
        /// Degree of confidence that Checkmarx has in the accuracy of the result (i.e. not false positive)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confidenceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ConfidenceLevel { get; set; }

        /// <summary>
        /// An array of the compliance standards that list this vulnerability
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compliances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Compliances { get; set; }

        /// <summary>
        /// The scanID of the scan in which the result (based on SimilarityID) was first identified in this project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstScanID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstScanID { get; set; }

        /// <summary>
        /// The date and time that this result (based on SimilarityID) was first identified in this tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstFoundAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset FirstFoundAt { get; set; }

        /// <summary>
        /// ID created from queryMetaInfo + similarityID + files name. FOR TESTING PURPOSES ONLY! WILL BE REMOVED!
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pathSystemIDBySimiAndFilesPaths", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PathSystemIDBySimiAndFilesPaths { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResultsStatus Status { get; set; }

        /// <summary>
        /// The date and time that this result was identified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foundAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset FoundAt { get; set; }

        /// <summary>
        /// An array of the nodes where the vulnerability was identified.&lt;br&gt; Note: This section is only included if the include-nodes query parameter was submitted as true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResultNode> Nodes { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResultsState State { get; set; }

        [Newtonsoft.Json.JsonProperty("changeDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChangeDetails ChangeDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SastResultCompare
    {
        /// <summary>
        /// ID of the result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ID { get; set; }

        /// <summary>
        /// An ID that represents this result system wide
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resultHash", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResultHash { get; set; }

        /// <summary>
        /// Please use "resultHash" instead
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pathSystemID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public string PathSystemID { get; set; }

        /// <summary>
        /// The ID of the query that generated this result (i.e. the vulnerability that was identified)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueryID { get; set; }

        /// <summary>
        /// The name of the query/vulnerability
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueryName { get; set; }

        /// <summary>
        /// The language of the vulnerability
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageName { get; set; }

        /// <summary>
        /// The name of the query/vulnerability group
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group { get; set; }

        /// <summary>
        /// The ID of the Common Weakness Enumeration(CWE)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cweID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CweID { get; set; }

        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResultsSeverity Severity { get; set; }

        /// <summary>
        /// A value assigned to a specific vulnerability instance in your scan, based on the first and last nodes.&lt;br&gt;This enables CxAST to track that particular instance in future scans.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("similarityID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimilarityID { get; set; }

        [Newtonsoft.Json.JsonProperty("uniqueID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public int UniqueID { get; set; }

        /// <summary>
        /// Degree of confidence that Checkmarx has in the accuracy of the result (i.e. not false positive)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confidenceLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ConfidenceLevel { get; set; }

        /// <summary>
        /// An array of the compliance standards that list this vulnerability
        /// </summary>
        [Newtonsoft.Json.JsonProperty("compliances", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Compliances { get; set; }

        /// <summary>
        /// The scanID of the scan in which the result (based on SimilarityID) was first identified in this project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstScanID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Guid FirstScanID { get; set; }

        /// <summary>
        /// The date and time that this result (based on SimilarityID) was first identified in this tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstFoundAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset FirstFoundAt { get; set; }

        /// <summary>
        /// ID created from queryMetaInfo + similarityID + files name. FOR TESTING PURPOSES ONLY! WILL BE REMOVED!
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pathSystemIDBySimiAndFilesPaths", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PathSystemIDBySimiAndFilesPaths { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResultsStatus Status { get; set; }

        /// <summary>
        /// The date and time that this result was identified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foundAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset FoundAt { get; set; }

        /// <summary>
        /// An array of the nodes where the vulnerability was identified.&lt;br&gt; Note: This section is only included if the include-nodes query parameter was submitted as true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResultNode> Nodes { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResultsState State { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResultNode
    {
        /// <summary>
        /// The column number of the beginning of the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("column", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Column { get; set; }

        /// <summary>
        /// The name of the file in which the node is located
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        /// <summary>
        /// The FQN (Fully Qualified Name) designated by Checkmarx for this node, based on the text/content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }

        /// <summary>
        /// The number of characters in the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Length { get; set; }

        /// <summary>
        /// The line number of the beginning of the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Line { get; set; }

        /// <summary>
        /// The line position in the source code containing the method
        /// </summary>
        [Newtonsoft.Json.JsonProperty("methodLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MethodLine { get; set; }

        /// <summary>
        /// The name designated by Checkmarx for this node, based on the text/content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The DOM type of the node
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DomType { get; set; }

        /// <summary>
        /// Please use "nodeHash" instead
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nodeSystemID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public string NodeSystemID { get; set; }

        /// <summary>
        /// ID of the customer tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nodeHash", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodeHash { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Status enum of a result
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResultsStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RECURRENT")]
        RECURRENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FIXED")]
        FIXED = 2,

    }

    /// <summary>
    /// Operation type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LESS_THAN")]
        LESS_THAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GREATER_THAN")]
        GREATER_THAN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EQUAL")]
        EQUAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_EQUAL")]
        NOT_EQUAL = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CONTAINS")]
        CONTAINS = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_CONTAINS")]
        NOT_CONTAINS = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"START_WITH")]
        START_WITH = 6,

    }

    /// <summary>
    /// Int Operation type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationIntEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LESS_THAN")]
        LESS_THAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GREATER_THAN")]
        GREATER_THAN = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EQUAL")]
        EQUAL = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_EQUAL")]
        NOT_EQUAL = 3,

    }

    /// <summary>
    /// Date Operation type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationDateEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LESS_THAN")]
        LESS_THAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GREATER_THAN")]
        GREATER_THAN = 1,

    }

    /// <summary>
    /// JSONB array Operator type enum
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationJSONBArrayEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CONTAINS")]
        CONTAINS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"START_WITH")]
        START_WITH = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebError
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Code { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeDetails
    {
        /// <summary>
        /// If true, the engine version has been changed indicating, this result appears due to (at least partially) this
        /// </summary>
        [Newtonsoft.Json.JsonProperty("engineVersionChanged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EngineVersionChanged { get; set; }

        /// <summary>
        /// Specific details regarding the engine version change
        /// </summary>
        [Newtonsoft.Json.JsonProperty("engineVersionChangeDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EngineVersionChangeDetails { get; set; }

        /// <summary>
        /// if true, the query used in this result has been changed, indicating this result appears due to (at least partially) this
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryChanged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool QueryChanged { get; set; }

        /// <summary>
        /// Specific details regarding the query version change
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryChangeDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueryChangeDetails { get; set; }

        /// <summary>
        /// if true, some of the code in this result path has been changed, indicating this result appears due to (at least partially) this
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeChanged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CodeChanged { get; set; }

        /// <summary>
        /// Specific details regarding the code change/s
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeChangeDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeChangeDetails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"-severity")]
        Minusseverity = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"+severity")]
        Plusseverity = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"-status")]
        Minusstatus = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"+status")]
        Plusstatus = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-state")]
        Minusstate = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+state")]
        Plusstate = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SASTResultsResponse
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.AllowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SASTResult> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SastResultCompareResponse
    {
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SastResultCompare> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 108
#pragma warning restore 114
#pragma warning restore 472
#pragma warning restore 612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625